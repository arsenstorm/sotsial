name: Publish to NPM

on:
  push:

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          registry-url: "https://registry.npmjs.org"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install dependencies
        working-directory: packages/sotsial
        run: bun install

      - name: Check version change
        id: check_version
        working-directory: packages/sotsial
        run: |
          # Store current commit hash
          CURRENT_COMMIT=$(git rev-parse HEAD)
          
          # Get current version
          CURRENT_VERSION=$(bun run pkg-version)
          
          # Get previous version from the last commit
          git checkout HEAD~1
          PREVIOUS_VERSION=$(bun run pkg-version)
          
          # Return to original commit explicitly
          git checkout $CURRENT_COMMIT
          
          # Compare versions
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "Version has changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          else
            echo "Version has not changed ($CURRENT_VERSION)"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.check_version.outputs.should_publish == 'true'
        working-directory: packages/sotsial
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create .npmrc file
          echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" > .npmrc
          
          # Get version from package.json
          TAG=$(bun run pkg-version)
          
          # Check if it's a beta version
          if [[ $TAG =~ ^[0-9]+\.[0-9]+\.[0-9]+-beta\.[0-9]+$ ]]; then
            echo "Publishing beta version $TAG"
            bunx npm publish --provenance --tag beta
          else
            echo "Publishing production version $TAG"
            bunx npm publish --provenance --tag latest
          fi
          
          # Clean up .npmrc file
          rm .npmrc

      - name: Create GitHub Release
        if: steps.check_version.outputs.should_publish == 'true'
        working-directory: packages/sotsial
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get version from package.json
          TAG=$(bun run pkg-version)
          
          # Get the repository URL from package.json
          REPO_URL=$(node -p "require('./package.json').repository?.url ?? ''")
          REPO_NAME=$(echo $REPO_URL | sed -n 's/.*github.com\/\(.*\)\.git/\1/p')
          
          # If repo name couldn't be extracted, try to derive from GitHub context
          if [ -z "$REPO_NAME" ]; then
            REPO_NAME="${GITHUB_REPOSITORY}"
          fi
          
          # Extract the previous git tag to create comparison link
          PREV_TAG=$(git tag --sort=-v:refname | head -n 1 || echo "")
          
          # Create comparison link if previous tag exists
          if [ -n "$PREV_TAG" ]; then
            COMPARISON_LINK="https://github.com/${REPO_NAME}/compare/${PREV_TAG}...v${TAG}"
            RELEASE_NOTES="## What's Changed\nSee all changes: [${PREV_TAG}...v${TAG}](${COMPARISON_LINK})"
          else
            RELEASE_NOTES="Initial release"
          fi
          
          # Set release title
          RELEASE_TITLE="v$TAG"
          
          # Check if it's a beta version to set prerelease flag
          if [[ $TAG =~ ^[0-9]+\.[0-9]+\.[0-9]+-beta\.[0-9]+$ ]]; then
            echo "Creating GitHub beta release $TAG"
            gh release create "v$TAG" \
              --title "$RELEASE_TITLE" \
              --notes "$RELEASE_NOTES" \
              --prerelease
          else
            echo "Creating GitHub production release $TAG"
            gh release create "v$TAG" \
              --title "$RELEASE_TITLE" \
              --notes "$RELEASE_NOTES"
          fi
